// Code generated by MockGen. DO NOT EDIT.
// Source: blog-service/server (interfaces: DBClient)

// Package mock is a generated GoMock package.
package mock

import (
	blog "blog-service/rpc/blog"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDBClient is a mock of DBClient interface.
type MockDBClient struct {
	ctrl     *gomock.Controller
	recorder *MockDBClientMockRecorder
}

// MockDBClientMockRecorder is the mock recorder for MockDBClient.
type MockDBClientMockRecorder struct {
	mock *MockDBClient
}

// NewMockDBClient creates a new mock instance.
func NewMockDBClient(ctrl *gomock.Controller) *MockDBClient {
	mock := &MockDBClient{ctrl: ctrl}
	mock.recorder = &MockDBClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBClient) EXPECT() *MockDBClientMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockDBClient) Connect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect")
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockDBClientMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockDBClient)(nil).Connect))
}

// CreateBlog mocks base method.
func (m *MockDBClient) CreateBlog(arg0 *blog.CreateBlogRequest) (*blog.CreateBlogResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBlog", arg0)
	ret0, _ := ret[0].(*blog.CreateBlogResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBlog indicates an expected call of CreateBlog.
func (mr *MockDBClientMockRecorder) CreateBlog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlog", reflect.TypeOf((*MockDBClient)(nil).CreateBlog), arg0)
}

// DeleteBlog mocks base method.
func (m *MockDBClient) DeleteBlog(arg0 *blog.DeleteBlogRequest) (*blog.DeleteBlogResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBlog", arg0)
	ret0, _ := ret[0].(*blog.DeleteBlogResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBlog indicates an expected call of DeleteBlog.
func (mr *MockDBClientMockRecorder) DeleteBlog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBlog", reflect.TypeOf((*MockDBClient)(nil).DeleteBlog), arg0)
}

// GetBlog mocks base method.
func (m *MockDBClient) GetBlog(arg0 *blog.GetBlogRequest) (*blog.GetBlogResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlog", arg0)
	ret0, _ := ret[0].(*blog.GetBlogResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlog indicates an expected call of GetBlog.
func (mr *MockDBClientMockRecorder) GetBlog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlog", reflect.TypeOf((*MockDBClient)(nil).GetBlog), arg0)
}

// ListBlog mocks base method.
func (m *MockDBClient) ListBlog(arg0 *blog.ListBlogRequest) (*blog.ListBlogResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBlog", arg0)
	ret0, _ := ret[0].(*blog.ListBlogResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBlog indicates an expected call of ListBlog.
func (mr *MockDBClientMockRecorder) ListBlog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBlog", reflect.TypeOf((*MockDBClient)(nil).ListBlog), arg0)
}

// UpdateBlog mocks base method.
func (m *MockDBClient) UpdateBlog(arg0 *blog.UpdateBlogRequest) (*blog.UpdateBlogResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBlog", arg0)
	ret0, _ := ret[0].(*blog.UpdateBlogResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBlog indicates an expected call of UpdateBlog.
func (mr *MockDBClientMockRecorder) UpdateBlog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBlog", reflect.TypeOf((*MockDBClient)(nil).UpdateBlog), arg0)
}
