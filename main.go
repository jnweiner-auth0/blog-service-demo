package main

// import local packages with <module_name>/<package_name>
// in this case, module_name is blog-service (see go.mod)
import (
	config "blog-service/config"
	"blog-service/db"
	blogProto "blog-service/rpc/blog"
	"blog-service/server"
	"fmt"
	"log"
	"net/http"
)

func startServer(conf *config.Configuration) {
	fmt.Println("Starting server")

	var DB server.DBClient

	if conf.DBEngine == "postgres" {
		DB = db.NewPostgresClient()
	} else {
		DB = db.NewMongoClient()
	}

	err := DB.Connect()
	if err != nil {
		log.Fatalf("err connecting to db: %v", err)
		return
	}

	// assign server variable to the address of the Server struct in the server package
	server := server.NewServer(DB)

	// assign handler variable to the TwirpServer generated by the NewBlogServiceServer function in service.twirp.go
	handler := blogProto.NewBlogServiceServer(server)

	fmt.Printf("Server listening on port: %v\n", conf.Port)

	// format the port number to match expected argument format for http.ListenAndServe function
	listener := fmt.Sprintf(":%v", conf.Port)

	// see docs for more information on http package: https://pkg.go.dev/net/http#example-ListenAndServe
	http.ListenAndServe(listener, handler)
}

func main() {
	conf := config.GetConfiguration()
	startServer(conf)
}
